load("~/Documents/22_Curso_en_RMB_2025/datos.RData")
# BiocManager::install("DESeq2")
library(DESeq2)
library(ggplot2)
library(magrittr)
head(datos)
dim(datos)
datosm <- data.frame(
sample.id = c("Control_1_Raiz", "Control_2_Raiz",
"Trat_1_Raiz", "Trat_2_Raiz",
"Control_1_Hojas", "Control_2_Hojas",
"Trat_1_Hojas", "Trat_2_Hojas"),
# Las réplicas técnicas dentro de cada condición experimental
num.tech.reps = rep(1:2, 4),  # 1 para la primera réplica, 2 para la segunda réplica
# El factor de condición experimental (control vs. tratamiento)
strain = c("Control", "Control", "Trat", "Trat",
"Control", "Control", "Trat", "Trat"),
# Las condiciones experimentales (en este caso las raíces o las hojas)
experiment.number = c(1, 2, 1, 2, 1, 2, 1, 2),  # Número de réplica dentro de cada condición
# El tipo de tratamiento (Mock o Tratamiento)
Experiment = c("Mock", "Mock", "Tratamiento", "Tratamiento",
"Mock", "Mock", "Tratamiento", "Tratamiento"),
stringsAsFactors = FALSE
)
# Agregar una nueva columna 'tissue' que distingue entre raíces y hojas
datosm$tissue <- ifelse(grepl("Raiz", datosm$sample.id), "Raiz", "Hoja")
# Verifica el objeto datosm
head(datosm)
# Utilizando el objeto "metadata" asignamos como nombre de las filas la columna "sample.id"
head(datosm)
rownames(datosm)<-datosm$sample.id
head(datosm)
# Confirmamos que tenemos todas las condiciones en nuestro objeto "metadata"
all(colnames(datos) == rownames(datosm))
# Normalizar y transformar las cuentas de datos usando "default desing"
# Trabajaremos con una matriz
counts.matrix<- as.matrix(datos)
datosm$strain = factor(datosm$strain)
datosm$experiment.number <- factor(datosm$experiment.number)
datosm$tissue <- factor(datosm$tissue)
dds <- DESeqDataSetFromMatrix(
countData = round(counts.matrix),  # Tu matriz de conteos (filas=genes, columnas=muestras)
colData = datosm,  # El data frame con los metadatos
design = ~ strain + experiment.number  # Considera tanto la condición como las réplicas técnicas
)
dds <- DESeqDataSetFromMatrix(
countData = round(counts.matrix),  # Tu matriz de conteos (de genes x muestras)
colData = datosm,  # El data frame con los metadatos
design = ~ tissue + strain + experiment.number  # Fórmula de diseño (tissue, strain y experiment.number)
)
# VST para normalizar las cuentas. Es más rápido
vsd<- vst(dds, blind = FALSE) # blind FALSE para considerar el diseño experimental
mat_v<- assay(vsd)
p_v<- plotPCA(vsd, intgroup=c("strain"))
show(p_v)
p_v<- plotPCA(vsd, intgroup=c("strain"), ntop=1000)
show(p_v)
library(ggplot2)
library(ggplotify)
library(ggrepel)
# Primero vamos a obtener los datos de PCA sin generar un gráfico
pcaData<- plotPCA(vsd, intgroup=c("sample.id","tissue","experiment.number"), returnData=TRUE)
##### Calcular el porcentaje de varianza explicado por cada componente princial (PC)
# Este paso calcula qué porcentaje de la variabilidad total de los datos es explicado por cada uno de los componentes principales (PC1, PC2, etc.).
# attr(pcaData, "percentVar"): Este código obtiene la varianza explicada por cada componente principal (PC) a partir de los resultados del PCA que has calculado previamente. Los resultados del PCA, como las componentes principales (PC1, PC2, etc.), incluyen una medida de cuánta variabilidad en los datos es explicada por cada componente.
# 100 * attr(pcaData, "percentVar"): Multiplica por 100 para convertir esa proporción en un porcentaje.
# round(...): Redondea los valores para hacerlos más fáciles de interpretar (por ejemplo, redondear 24.678 a 25).
percentVar<- round(100 * attr(pcaData, "percentVar"))
g<- ggplot(pcaData,aes(PC1,PC2))
show(g)
g2<-g + geom_point(size=4, aes(col=tissue,fill=sample.id), shape = 21, stroke = 1)
show(g2)
library(RColorBrewer)
display.brewer.all()
display.brewer.pal(9, "YlOrRd")
brewer.pal(n = 12, name = "Paired")
g3 <- g + geom_point(size=4, aes(col=tissue,fill=sample.id), shape = 21, stroke = 1) +
# Colores para "tissue"
scale_color_manual(values = c("Raiz" = "#E31A1C", "Hoja" = "#FEB24C")) +
# Colores para cada muestra
scale_fill_manual(values = c("Control_1_Raiz" = "#1D91C0", "Control_2_Raiz" ="#1D91C0",
"Trat_1_Raiz" = "#081D58", "Trat_2_Raiz" = "#081D58",
"Control_1_Hojas" = "#B2DF8A", "Control_2_Hojas" = "#B2DF8A",
"Trat_1_Hojas" = "#33A02C", "Trat_2_Hojas" = "#33A02C"))
g3 + theme_bw()
g4<- g3 + geom_text_repel(aes(label=sample.id), direction = "both", nudge_y = 1.1, point.padding = 0.6,
box.padding = 0.5, min.segment.length = unit(0.2,"lines"), size=2.5)
g4 + theme_bw()
# Añadir un titulo y cambiar las etiquetas del eje x y y
g5<- g4 + theme_bw() + ggtitle("PCA con todas las librerías (lecturas crudas)") +
xlab(paste0("PC1:",percentVar[1], "% variance")) +
ylab(paste0("PC2:",percentVar[2], "% variance"))
show(g5)
g6<- g5 + facet_wrap(~ tissue)
g6
# Cargar los paquetes que necesitaremos para hacer nuestro heatmap
library(pheatmap)
# look at genes whose expression across the samples has a high degree of variability
# get matrix from DESeq2 transform object
myMatrix<- SummarizedExperiment::assay(vsd)
opVarGenes<- head(order(rowVars(myMatrix, useNames = TRUE), decreasing = TRUE),500)
myMatrix_for_heatmap<- myMatrix[topVarGenes,]
topVarGenes<- head(order(rowVars(myMatrix, useNames = TRUE), decreasing = TRUE),500)
myMatrix_for_heatmap<- myMatrix[topVarGenes,]
head(datos)
column_order <- c("Control_1_Raiz", "Control_2_Raiz","Trat_1_Raiz", "Trat_2_Raiz",
"Control_1_Hojas", "Control_2_Hojas", "Trat_1_Hojas", "Trat_2_Hojas")
myMatrix_for_heatmap_order <- myMatrix_for_heatmap[, column_order]
# Ahora vamos a dibujar un heatmap utilizando los 500 genes más variables seleccionados en el paso anterior.
phm<- pheatmap(myMatrix_for_heatmap_order,
#Escalar los datos por filas
scale = "row",
# Agrupar las filas y columnas
cluster_rows = TRUE,
cluster_cols = TRUE,
# Mostrar/ocultar los genes o las muestras gene or sample names
show_rownames = FALSE,
show_colnames = TRUE)
show(phm)
?pheatmap()
phm1<- pheatmap(myMatrix_for_heatmap_order,
#Escalar los datos por filas
scale = "row",
# Agrupar las filas y columnas
cluster_rows = TRUE,
cluster_cols = TRUE,
# Mostrar/ocultar los genes o las muestras gene or sample names
show_rownames = FALSE,
show_colnames = TRUE,
main = "Heatmap con 500 mas variables",
fontsize = 13,
fontsize_row = 13,
fontsize_col = 10,
angle_col = "90")
show(phm1)
phm1<- pheatmap(myMatrix_for_heatmap_order,
#Escalar los datos por filas
scale = "row",
# Agrupar las filas y columnas
cluster_rows = TRUE,
cluster_cols = TRUE,
# Mostrar/ocultar los genes o las muestras gene or sample names
show_rownames = FALSE,
show_colnames = TRUE,
main = "Heatmap con 500 mas variables",
fontsize = 13,
fontsize_row = 13,
fontsize_col = 10,
angle_col = "45") #90 grados
show(phm1)
phm1<- pheatmap(myMatrix_for_heatmap_order,
#Escalar los datos por filas
scale = "row",
# Agrupar las filas y columnas
cluster_rows = FALSE,
cluster_cols = TRUE,
# Mostrar/ocultar los genes o las muestras gene or sample names
show_rownames = FALSE,
show_colnames = TRUE,
main = "Heatmap con 500 mas variables",
fontsize = 13,
fontsize_row = 13,
fontsize_col = 10,
angle_col = "45") #90 grados
show(phm1)
phm1<- pheatmap(myMatrix_for_heatmap_order,
#Escalar los datos por filas
scale = "row",
# Agrupar las filas y columnas
cluster_rows = TRUE,
cluster_cols = TRUE,
# Mostrar/ocultar los genes o las muestras gene or sample names
show_rownames = FALSE,
show_colnames = TRUE,
main = "Heatmap con 500 mas variables",
fontsize = 13,
fontsize_row = 13,
fontsize_col = 10,
angle_col = "45") #90 grados
show(phm1)
head(datosm)
atosm$Experiment<- c("Control_Raiz","Control_Raiz","Tratamiento_Raiz", "Tratamiento_Raiz",
"Control_Hojas", "Control_Hojas", "Tratamiento_Hojas", "Tratamiento_Hojas")
atosm$Experiment<- c("Control_Raiz","Control_Raiz","Tratamiento_Raiz", "Tratamiento_Raiz",
"Control_Hojas", "Control_Hojas", "Tratamiento_Hojas", "Tratamiento_Hojas")
datosm$Experiment<- c("Control_Raiz","Control_Raiz","Tratamiento_Raiz", "Tratamiento_Raiz",
"Control_Hojas", "Control_Hojas", "Tratamiento_Hojas", "Tratamiento_Hojas")
ann_colors <- list(
strain = c("Control" = "#807DBA",
"Trat" = "#DE77AE"),
Experiment = c("Control_Hojas" = "darkgreen",
"Control_Raiz" = "#377EB8",
"Tratamiento_Raiz"="#FF7F00",
"Tratamiento_Hojas"="#E41A1C")
)
phm2<- pheatmap(myMatrix_for_heatmap_order,
#sacle the data by row
scale = "row",
main="Draw heatmap based on the most variable genes",
legend_labels = c("Low", "Medium", "High"),
#cluster rows and columns are use default order
cluster_rows = TRUE,
cluster_cols = TRUE,
# show/hide gene or sample names
show_rownames = FALSE,
show_colnames = TRUE,
# column annotation
annotation_col = datosm[,c("strain", "Experiment"), drop=FALSE],
annotation_colors = ann_colors)
show(phm2)
###-- Extracción de la informacion del objeto pheatmap.
# Utilizaremos str para ver la estructura del objeto phm
str(phm2, list.len = 2)
# El simbolo $ puede ser utilizado para extraer los elementos de la lista
phm2$tree_row$labels[phm2$tree_row$order] %>% head()
# get columns labels in same order as in heatmap
phm2$tree_col$labels[phm2$tree_col$order] %>% head()
